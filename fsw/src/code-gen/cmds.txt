/* Noop command */
CFE_Status_t BPNode_NoopCmd(const BPNode_NoopCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Noop command not implemented");

    return CFE_SUCCESS;
}

/* Add all applications command */
CFE_Status_t BPNode_AddAllApplicationsCmd(const BPNode_AddAllApplicationsCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Add all applications command not implemented");

    return CFE_SUCCESS;
}

/* Start all applications command */
CFE_Status_t BPNode_StartAllApplicationsCmd(const BPNode_StartAllApplicationsCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Start all applications command not implemented");

    return CFE_SUCCESS;
}

/* Verify bundle storage command */
CFE_Status_t BPNode_VerifyBundleStorageCmd(const BPNode_VerifyBundleStorageCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Verify bundle storage command not implemented");

    return CFE_SUCCESS;
}

/* Initialize bundle storage command */
CFE_Status_t BPNode_InitBundleStorageCmd(const BPNode_InitBundleStorageCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Initialize bundle storage command not implemented");

    return CFE_SUCCESS;
}

/* Verify bundle metadata (7.2) command */
CFE_Status_t BPNode_VerifyBundleMetadataCmd(const BPNode_VerifyBundleMetadataCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Verify bundle metadata (7.2) command not implemented");

    return CFE_SUCCESS;
}

/* Rebuild bundle metadata command */
CFE_Status_t BPNode_RebuildBundleMetadataCmd(const BPNode_RebuildBundleMetadataCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Rebuild bundle metadata command not implemented");

    return CFE_SUCCESS;
}

/* Clear volatile command */
CFE_Status_t BPNode_ClearVolatileCmd(const BPNode_ClearVolatileCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Clear volatile command not implemented");

    return CFE_SUCCESS;
}

/* Reload saved data (7.2) command */
CFE_Status_t BPNode_ReloadSavedDataCmd(const BPNode_ReloadSavedDataCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Reload saved data (7.2) command not implemented");

    return CFE_SUCCESS;
}

/* Reset all counters command */
CFE_Status_t BPNode_ResetAllCountersCmd(const BPNode_ResetAllCountersCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Reset all counters command not implemented");

    return CFE_SUCCESS;
}

/* Reset counter command */
CFE_Status_t BPNode_ResetCounterCmd(const BPNode_ResetCounterCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Reset counter command not implemented");

    return CFE_SUCCESS;
}

/* Reset source counters command */
CFE_Status_t BPNode_ResetSourceCountersCmd(const BPNode_ResetSourceCountersCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Reset source counters command not implemented");

    return CFE_SUCCESS;
}

/* Reset bundle counters command */
CFE_Status_t BPNode_ResetBundleCountersCmd(const BPNode_ResetBundleCountersCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Reset bundle counters command not implemented");

    return CFE_SUCCESS;
}

/* Reset error counters command */
CFE_Status_t BPNode_ResetErrorCountersCmd(const BPNode_ResetErrorCountersCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Reset error counters command not implemented");

    return CFE_SUCCESS;
}

/* Add application command */
CFE_Status_t BPNode_AddApplicationCmd(const BPNode_AddApplicationCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Add application command not implemented");

    return CFE_SUCCESS;
}

/* Remove application command */
CFE_Status_t BPNode_RemoveApplicationCmd(const BPNode_RemoveApplicationCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Remove application command not implemented");

    return CFE_SUCCESS;
}

/* Set registration state command */
CFE_Status_t BPNode_SetRegistrationStateCmd(const BPNode_SetRegistrationStateCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Set registration state command not implemented");

    return CFE_SUCCESS;
}

/* Start application command */
CFE_Status_t BPNode_StartApplicationCmd(const BPNode_StartApplicationCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Start application command not implemented");

    return CFE_SUCCESS;
}

/* Stop application command */
CFE_Status_t BPNode_StopApplicationCmd(const BPNode_StopApplicationCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Stop application command not implemented");

    return CFE_SUCCESS;
}

/* Add authorized sources command */
CFE_Status_t BPNode_AddAuthSourcesCmd(const BPNode_AddAuthSourcesCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Add authorized sources command not implemented");

    return CFE_SUCCESS;
}

/* Remove authorized sources command */
CFE_Status_t BPNode_RemoveAuthSourcesCmd(const BPNode_RemoveAuthSourcesCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Remove authorized sources command not implemented");

    return CFE_SUCCESS;
}

/* Add authorized custody sources command */
CFE_Status_t BPNode_AddAuthCustodySourcesCmd(const BPNode_AddAuthCustodySourcesCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Add authorized custody sources command not implemented");

    return CFE_SUCCESS;
}

/* Remove authorized custody sources command */
CFE_Status_t BPNode_RemoveAuthCustodySourcesCmd(const BPNode_RemoveAuthCustodySourcesCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Remove authorized custody sources command not implemented");

    return CFE_SUCCESS;
}

/* Add authorized custodians command */
CFE_Status_t BPNode_AddAuthCustodiansCmd(const BPNode_AddAuthCustodiansCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Add authorized custodians command not implemented");

    return CFE_SUCCESS;
}

/* Remove authorized custodians command */
CFE_Status_t BPNode_RemoveAuthCustodiansCmd(const BPNode_RemoveAuthCustodiansCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Remove authorized custodians command not implemented");

    return CFE_SUCCESS;
}

/* Add authorized report-to eid command */
CFE_Status_t BPNode_AddAuthReportToEidCmd(const BPNode_AddAuthReportToEidCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Add authorized report-to eid command not implemented");

    return CFE_SUCCESS;
}

/* Remove authorized report-to eid command */
CFE_Status_t BPNode_RemoveAuthReportToEidCmd(const BPNode_RemoveAuthReportToEidCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Remove authorized report-to eid command not implemented");

    return CFE_SUCCESS;
}

/* Add latency command */
CFE_Status_t BPNode_AddLatencyCmd(const BPNode_AddLatencyCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Add latency command not implemented");

    return CFE_SUCCESS;
}

/* Remove latency command */
CFE_Status_t BPNode_RemoveLatencyCmd(const BPNode_RemoveLatencyCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Remove latency command not implemented");

    return CFE_SUCCESS;
}

/* Contact setup command */
CFE_Status_t BPNode_ContactSetupCmd(const BPNode_ContactSetupCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Contact setup command not implemented");

    return CFE_SUCCESS;
}

/* Contact start command */
CFE_Status_t BPNode_ContactStartCmd(const BPNode_ContactStartCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Contact start command not implemented");

    return CFE_SUCCESS;
}

/* Contact stop command */
CFE_Status_t BPNode_ContactStopCmd(const BPNode_ContactStopCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Contact stop command not implemented");

    return CFE_SUCCESS;
}

/* Contact teardown command */
CFE_Status_t BPNode_ContactTeardownCmd(const BPNode_ContactTeardownCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Contact teardown command not implemented");

    return CFE_SUCCESS;
}

/* Add mib array key command */
CFE_Status_t BPNode_AddMibArrayKeyCmd(const BPNode_AddMibArrayKeyCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Add mib array key command not implemented");

    return CFE_SUCCESS;
}

/* Remove mib array key command */
CFE_Status_t BPNode_RemoveMibArrayKeyCmd(const BPNode_RemoveMibArrayKeyCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Remove mib array key command not implemented");

    return CFE_SUCCESS;
}

/* Set mib item command */
CFE_Status_t BPNode_SetMibItemCmd(const BPNode_SetMibItemCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Set mib item command not implemented");

    return CFE_SUCCESS;
}

/* Add storage allocation command */
CFE_Status_t BPNode_AddStorageAllocationCmd(const BPNode_AddStorageAllocationCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Add storage allocation command not implemented");

    return CFE_SUCCESS;
}

/* Remove storage allocation command */
CFE_Status_t BPNode_RemoveStorageAllocationCmd(const BPNode_RemoveStorageAllocationCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Remove storage allocation command not implemented");

    return CFE_SUCCESS;
}

/* Perform self test (7.2) command */
CFE_Status_t BPNode_PerformSelfTestCmd(const BPNode_PerformSelfTestCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Perform self test (7.2) command not implemented");

    return CFE_SUCCESS;
}

/* Send node mib config hk command */
CFE_Status_t BPNode_SendNodeMibConfigHkCmd(const BPNode_SendNodeMibConfigHkCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Send node mib config hk command not implemented");

    return CFE_SUCCESS;
}

/* Send per-source mib config hk command */
CFE_Status_t BPNode_SendSourceMibConfigHkCmd(const BPNode_SendSourceMibConfigHkCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Send per-source mib config hk command not implemented");

    return CFE_SUCCESS;
}

/* Send node mib counter hk command */
CFE_Status_t BPNode_SendNodeMibCountersHkCmd(const BPNode_SendNodeMibCountersHkCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Send node mib counter hk command not implemented");

    return CFE_SUCCESS;
}

/* Send per-source mib counter hk command */
CFE_Status_t BPNode_SendSourceMibCountersHkCmd(const BPNode_SendSourceMibCountersHkCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Send per-source mib counter hk command not implemented");

    return CFE_SUCCESS;
}

/* Send storage hk command */
CFE_Status_t BPNode_SendStorageHk(const BPNode_SendStorageHk_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Send storage hk command not implemented");

    return CFE_SUCCESS;
}

/* Send channel/contact status hk command */
CFE_Status_t BPNode_SendChannelContactStatHkCmd(const BPNode_SendChannelContactStatHkCmd_t *Msg)
{
    CFE_EVS_SendEvent(BPNODE_RESET_INF_EID, CFE_EVS_EventType_INFORMATION, 
                    "Send channel/contact status hk command not implemented");

    return CFE_SUCCESS;
}

